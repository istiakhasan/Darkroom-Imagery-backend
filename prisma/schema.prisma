generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model User {
  id               String            @id @default(uuid())
  name             String
  email            String            @unique
  password         String
  role             RoleEnum
  contactNo        String            @unique
  address          String
  profileImg       String
  presentAddress   String
  permanentAddress String
  about            String
  bioData          String
  createdAt        DateTime          @default(now())
  updatedAt        DateTime          @updatedAt
  Services         Services[]
  Faqs             Faqs[]
  Blog             Blog[]
  ReviewAndRating  ReviewAndRating[]
  BookedService    BookedService[]
  Permission       Permission[]
  Category         Category[]
  Feedback         Feedback[]

  @@map("user")
}

model Services {
  id              String            @id @default(uuid())
  serviceName     String
  service_desc    String
  service_img     String
  userId          String
  categoryId      String
  category        Category          @relation(fields: [categoryId], references: [id])
  user            User              @relation(fields: [userId], references: [id])
  ReviewAndRating ReviewAndRating[]
  createdAt       DateTime          @default(now())
  updatedAt       DateTime          @updatedAt
  BookedService   BookedService[]
  Slots           Slots[]
  price           Float
  status          ServiceStatusEnum
  availability    String
  location        String

  @@map("services")
}

model ReviewAndRating {
  id        String   @id @default(uuid())
  review    String
  rating    Int
  userEmail String
  serviceId String
  user      User     @relation(fields: [userEmail], references: [email])
  service   Services @relation(fields: [serviceId], references: [id])
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  @@map("review_and_rating")
}

model BookedService {
  id        String     @id @default(uuid())
  userEmail String
  serviceId String
  remarks   String
  startTime String
  endTime   String
  date      String
  status    StatusEnum
  isCancel  Boolean
  user      User       @relation(fields: [userEmail], references: [email])
  service   Services   @relation(fields: [serviceId], references: [id])
  createdAt DateTime   @default(now())
  updatedAt DateTime   @updatedAt

  @@map("booked_services")
}

// FAQ model schema 
model Faqs {
  id        String   @id @default(uuid())
  question  String
  answer    String
  userEmail String
  user      User     @relation(fields: [userEmail], references: [email])
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  @@map("faqs")
}

// blog model shcema
model Blog {
  id          String   @id @default(uuid())
  title       String
  description String
  image       String
  autherEmail String
  user        User     @relation(fields: [autherEmail], references: [email])
  createdAt   DateTime @default(now())
  updatedAt   DateTime @updatedAt

  @@map("blog")
}

model Slots {
  id        String   @id @default(uuid())
  time      String
  service   Services @relation(fields: [serviceId], references: [id])
  serviceId String

  @@map("slots")
}

model Permission {
  id     String @id @default(uuid())
  userId String
  user   User   @relation(fields: [userId], references: [id])

  @@map("permission")
}

model Category {
  id        String     @id @default(uuid())
  name      String
  image     String
  userId    String
  user      User       @relation(fields: [userId], references: [id])
  Services  Services[]
  createdAt DateTime   @default(now())
  updatedAt DateTime   @updatedAt

  @@map("category")
}

model Feedback {
  id        String   @id @default(uuid())
  subject   String
  message   String
  userId    String
  user      User     @relation(fields: [userId], references: [id])
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  @@map("feedback")
}

enum RoleEnum {
  admin
  user
  super_admin
}

enum StatusEnum {
  pending
  cofirm
  reject
}

enum ServiceStatusEnum {
  upcomming
  hot
  tranding
}
